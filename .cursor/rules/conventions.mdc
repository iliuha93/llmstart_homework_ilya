---
alwaysApply: true
---

# Правила разработки кода

Данные правила основаны на техническом видении проекта (@vision.md).

## Основные принципы

- **KISS** - максимальная простота во всем
- **MVP подход** - только необходимый функционал
- **Single Responsibility** - одна функция = одна задача
- **Читаемость превыше всего** - код должен быть понятен без комментариев

## Технические требования

### Структура кода
- Следовать структуре проекта из @vision.md
- Использовать модульную организацию: `bot/`, `llm/`
- Функциональное программирование, минимум классов

### Стиль кода
- **PEP8** - строгое соблюдение стандарта Python
- **Простые имена** - понятные переменные и функции
- **Минимум зависимостей** - только из списка технологий @vision.md

### Работа с данными
- Использовать простые типы: `dict`, `list`, `str`
- Модель данных как в @vision.md: `dialogs[chat_id]["messages"]`
- Никакой персистентности - только хранение в памяти

### Конфигурация и логирование
- Все настройки через `.env` файл (как в @vision.md)
- Стандартный модуль `logging` с уровнями INFO/ERROR/DEBUG
- Логировать все взаимодействия с LLM

### Обработка ошибок
- Простая обработка без сложной логики
- Fallback сообщения при сбоях LLM
- Логирование всех ошибок

## Запрещено
- Сложные архитектурные паттерны
- ORM и базы данных
- Внешние системы мониторинга
- Избыточное абстрагирование
- Классы без явной необходимости # Правила разработки кода

Данные правила основаны на техническом видении проекта (@vision.md).

## Основные принципы

- **KISS** - максимальная простота во всем
- **MVP подход** - только необходимый функционал
- **Single Responsibility** - одна функция = одна задача
- **Читаемость превыше всего** - код должен быть понятен без комментариев

## Технические требования

### Структура кода
- Следовать структуре проекта из @vision.md
- Использовать модульную организацию: `bot/`, `llm/`
- Функциональное программирование, минимум классов

### Стиль кода
- **PEP8** - строгое соблюдение стандарта Python
- **Простые имена** - понятные переменные и функции
- **Минимум зависимостей** - только из списка технологий @vision.md

### Работа с данными
- Использовать простые типы: `dict`, `list`, `str`
- Модель данных как в @vision.md: `dialogs[chat_id]["messages"]`
- Никакой персистентности - только хранение в памяти

### Конфигурация и логирование
- Все настройки через `.env` файл (как в @vision.md)
- Стандартный модуль `logging` с уровнями INFO/ERROR/DEBUG
- Логировать все взаимодействия с LLM

### Обработка ошибок
- Простая обработка без сложной логики
- Fallback сообщения при сбоях LLM
- Логирование всех ошибок

## Запрещено
- Сложные архитектурные паттерны
- ORM и базы данных
- Внешние системы мониторинга
- Избыточное абстрагирование
- Классы без явной необходимости 